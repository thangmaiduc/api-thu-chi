{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "My API",
    "description": "Documentation automatically generated by the <b>swagger-autogen</b> module."
  },
  "host": "localhost:3000",
  "basePath": "/",
  "schemes": [
    "http",
    "https"
  ],
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization",
      "description": "Please enter a valid token to test the requests below..."
    }
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/": {
      "get": {
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Endpoint to login.",
        "parameters": [
          {
            "name": "userCredentials",
            "in": "body",
            "schema": {
              "required": [
                "email",
                "password"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "maxLength": 250,
                  "example": "thang2@gmail.com"
                },
                "password": {
                  "type": "string",
                  "minLength": 7,
                  "maxLength": 250,
                  "example": "123456"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful."
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found "
          },
          "422": {
            "description": "Validation failed."
          },
          "500": {
            "description": "Error Internal Server"
          }
        }
      }
    },
    "/auth/create": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Endpoint to sign up an acount with email. A email with OTP will sent to your email.",
        "parameters": [
          {
            "name": "newUser",
            "in": "body",
            "schema": {
              "required": [
                "name",
                "email",
                "password"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "maxLength": 250,
                  "example": "Thang Mai."
                },
                "email": {
                  "type": "string",
                  "maxLength": 250,
                  "example": "thang@gmail.com"
                },
                "password": {
                  "type": "string",
                  "minLength": 6,
                  "maxLength": 250,
                  "example": "1234567"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not found "
          },
          "422": {
            "description": "Validation failed."
          },
          "500": {
            "description": "Error Internal Server"
          }
        }
      }
    },
    "/auth/verify-otp": {
      "post": {
        "tags": [
          "Auth"
        ],
        "description": "Endpoint to verify otp.",
        "parameters": [
          {
            "name": "verifyotp",
            "in": "body",
            "schema": {
              "required": [
                "otp",
                "email"
              ],
              "properties": {
                "opt": {
                  "type": "string",
                  "Length": 6,
                  "example": "123456"
                },
                "email": {
                  "type": "string",
                  "maxLength": 250,
                  "example": "thang@gmail.com"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not found "
          },
          "500": {
            "description": "Error Internal Server"
          }
        }
      }
    },
    "/auth/reset-password": {
      "put": {
        "tags": [
          "Auth"
        ],
        "description": "Endpoint reset password.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "resetLink": {
                  "example": "any"
                },
                "newPass": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not found "
          },
          "422": {
            "description": "Validation failed."
          },
          "500": {
            "description": "Error Internal Server"
          }
        }
      }
    },
    "/auth/forgot-password": {
      "put": {
        "tags": [
          "Auth"
        ],
        "description": "Endpoint forgot password and then receive a random password in email .",
        "parameters": [
          {
            "name": "reset-password",
            "in": "body",
            "schema": {
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "type": "string",
                  "maxLength": 250,
                  "example": "thang@gmail.com"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found "
          },
          "500": {
            "description": "Error Internal Server"
          }
        }
      }
    },
    "/api/nhom/{mydate}": {
      "get": {
        "tags": [
          "Group"
        ],
        "description": "Endpoint to get all group.",
        "parameters": [
          {
            "name": "mydate",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful.",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "404": {
            "description": "not found any group"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/nhom/": {
      "get": {
        "tags": [
          "Group"
        ],
        "description": "Endpoint to get all group.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful.",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "404": {
            "description": "not found any group"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Group"
        ],
        "description": "Endpoint to create a group.",
        "parameters": [
          {
            "name": "newGroup",
            "in": "body",
            "description": "Group information.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/addGroup"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "created successfully"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/nhom/{id}": {
      "patch": {
        "tags": [
          "Group"
        ],
        "description": "Endpoint to update a group.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Group ID."
          },
          {
            "name": "editGroup",
            "in": "body",
            "description": "Group information need edit.",
            "schema": {
              "$ref": "#/definitions/addGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful.",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "not found any group to edit"
          },
          "500": {
            "description": "Error internal server"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Group"
        ],
        "description": "Endpoint to delete a group.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Group ID."
          },
          {
            "name": "editGroup",
            "in": "body",
            "description": "Group information need edit.",
            "schema": {
              "$ref": "#/definitions/addGroup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful."
          },
          "404": {
            "description": "not found any group to edit"
          },
          "500": {
            "description": "Error internal server"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/khoan-thu-chi/thang/": {
      "get": {
        "tags": [
          "Post"
        ],
        "description": "Endpoint to get all month which contain any post.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/khoan-thu-chi/thang/{date}/so-do": {
      "get": {
        "tags": [
          "Post"
        ],
        "description": "Endpoint to statistics of revenue and expenditure in a month.",
        "parameters": [
          {
            "name": "date",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "a date in month then determine which month.",
            "require": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/khoan-thu-chi/thang/{date}/ngay": {
      "get": {
        "tags": [
          "Post"
        ],
        "description": "Endpoint to get all receipts, expenditures group by date in a month.",
        "parameters": [
          {
            "name": "date",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/khoan-thu-chi/ngay/pdf/{dateStart}/{dateEnd}": {
      "get": {
        "tags": [
          "Post"
        ],
        "description": "Endpoint to export revenue and expenditure in range from dateStart to dateEnd.",
        "parameters": [
          {
            "name": "dateStart",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "dateEnd",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/khoan-thu-chi/{id}": {
      "get": {
        "tags": [
          "Post"
        ],
        "description": "Endpoint to get a receipts or a expenditure.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Receipts ID or Expenditure ID."
          }
        ],
        "responses": {
          "200": {
            "description": "successful.",
            "schema": {
              "$ref": "#/definitions/expenditures"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Post"
        ],
        "description": "Endpoint to update a post.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Receipts ID or Expenditure ID."
          },
          {
            "name": "editPost",
            "in": "body",
            "description": "Post information need edit.",
            "schema": {
              "$ref": "#/definitions/editPost"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful.",
            "schema": {
              "$ref": "#/definitions/expenditures"
            }
          },
          "422": {
            "description": "Validation failed."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Post"
        ],
        "description": "Endpoint to update a post.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Receipts ID or Expenditure ID."
          }
        ],
        "responses": {
          "204": {
            "description": "delete successfully."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/khoan-thu-chi/": {
      "get": {
        "tags": [
          "Post"
        ],
        "description": "Endpoint to get all receipts or a expenditure of a user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful.",
            "schema": {
              "$ref": "#/definitions/expenditures"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Post"
        ],
        "description": "Create a post.",
        "parameters": [
          {
            "name": "addPost",
            "in": "body",
            "description": "add a receipts or a expenditure",
            "schema": {
              "$ref": "#/definitions/addPost"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successful."
          },
          "422": {
            "description": "Validation failed."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/users/me": {
      "patch": {
        "tags": [
          "User"
        ],
        "description": "",
        "parameters": [
          {
            "name": "edit-user",
            "in": "body",
            "schema": {
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "maxLength": 250,
                  "example": "thang mai"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "get": {
        "tags": [
          "User"
        ],
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/users/change-password": {
      "patch": {
        "tags": [
          "User"
        ],
        "description": "Endpoint change password .",
        "parameters": [
          {
            "name": "change-password",
            "in": "body",
            "schema": {
              "required": [
                "password",
                "oldPassword"
              ],
              "properties": {
                "password": {
                  "type": "string",
                  "maxLength": 250,
                  "minLength": 6,
                  "example": "123456"
                },
                "oldPassword": {
                  "type": "string",
                  "maxLength": 250,
                  "minLength": 6,
                  "example": "123456"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/users/upload": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Endpoint change image avatar .",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "singleFile",
            "in": "formData",
            "type": "file",
            "extensions": ".png|.jpeg.|jpg",
            "required": true,
            "description": "choose image with extension is supported."
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    }
  },
  "definitions": {
    "expenditures": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "example": "620f03af4060306a30737a26"
        },
        "money": {
          "type": "number",
          "example": 101000
        },
        "note": {
          "type": "string",
          "example": "tra nợ cho TU"
        },
        "group": {
          "type": "string",
          "example": "620f63f20f474f81b4fae559"
        },
        "date": {
          "type": "string",
          "example": "2022-02-18T02:20:42.986Z"
        }
      }
    },
    "receipts": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "example": "620f03af4060306a30737a26"
        },
        "money": {
          "type": "number",
          "example": 10000000
        },
        "note": {
          "type": "string",
          "example": "Tien luong thang 2"
        },
        "group": {
          "type": "string",
          "example": "620f63f20f474f81b4fae559"
        },
        "date": {
          "type": "string",
          "example": "2022-02-18T02:20:42.986Z"
        }
      }
    },
    "Group": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "example": "620f63f20f474f81b4fae559"
        },
        "name": {
          "type": "string",
          "example": "tien tieu vat"
        },
        "color": {
          "type": "string",
          "example": "red"
        },
        "type": {
          "type": "string",
          "example": "'thu' | 'chi'"
        }
      }
    },
    "addGroup": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Tiền lương"
        },
        "color": {
          "type": "string",
          "example": "ffff"
        },
        "type": {
          "type": "string",
          "example": "'thu' | 'chi'"
        }
      },
      "required": [
        "name",
        "color",
        "type"
      ]
    },
    "addPost": {
      "type": "object",
      "properties": {
        "money": {
          "type": "number",
          "example": 10000000
        },
        "note": {
          "type": "string",
          "example": "Tien luong thang 2"
        },
        "group": {
          "type": "string",
          "example": "620f63f20f474f81b4fae559"
        },
        "date": {
          "type": "string",
          "example": "2022-02-18T02:20:42.986Z"
        },
        "type": {
          "type": "string",
          "example": "thu | chi"
        }
      }
    },
    "editPost": {
      "type": "object",
      "properties": {
        "money": {
          "type": "number",
          "example": 10000000
        },
        "note": {
          "type": "string",
          "example": "Tien luong thang 2"
        },
        "group": {
          "type": "string",
          "example": "620f63f20f474f81b4fae559"
        }
      }
    }
  }
}